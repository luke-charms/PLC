Function alternatingRow(n: Int, tile1: Tile, tile2: Tile): Tile {
  if (n == 0) {
    return blank tile1
  } else if (n % 2 == 1) {
    combineH (tile1) (alternatingRow (n-1) (tile1) (tile2))
  } else {
    combineH (tile2) (alternatingRow (n-1) (tile1) (tile2))
  }
}

Function alternatingBoard(m: Int, n: Int, tile1: Tile, tile2: Tile): Tile {
  if (m == 0) {
    return blank tile1
  } else if (m % 2 == 1) {
    combineV (alternatingRow (n) (tile1) (tile2)) (alternatingBoard (m-1) (n) (tile1) (tile2))
  } else {
    combineV (alternatingRow (n) (tile2) (tile1)) (alternatingBoard (m-1) (n) (tile1) (tile2))
  }
}

Function alternatingBoard(m: Int, n: Int, tile1: Tile, tile2: Tile): Int {1+2}

let (inputTile1:Tile) = (input(tile1)) in
let (inputTile2:Tile) = (input(tile2)) in
let (alternatingRow:Function) = Function alternatingRow(n: Int, tile1: Tile, tile2: Tile): Tile {
  if (n == 0) {
    return blank tile1
  } else if (n % 2 == 1) {
    combineH (tile1) (alternatingRow (n-1) (tile1) (tile2))
  } else {
    combineH (tile2) (alternatingRow (n-1) (tile1) (tile2))
  }
} in 
let (alternatingBoard:Function) = Function alternatingBoard(m: Int, n: Int, tile1: Tile, tile2: Tile): Tile {
  if (m == 0) {
    return blank tile1
  } else if (m % 2 == 1) {
    combineV (alternatingRow (n) (tile1) (tile2)) (alternatingBoard (m-1) (n) (tile1) (tile2))
  } else {
    combineV (alternatingRow (n) (tile2) (tile1)) (alternatingBoard (m-1) (n) (tile1) (tile2))
  }
}) in 
let (output:Tile) = alternatingBoard(64, 64, inputTile1, inputTile2)

